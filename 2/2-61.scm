(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1 (intersection-set (cdr set1)
                                          (cdr set2))))
              ((< x1 x2)
               (intersection-set (cdr set1) set2))
              ((< x2 x1)
               (intersection-set set1 (cdr set2)))))))

; implementation
(define (adjoin x set)
  (define (adjoin-iter x set1 set2)
    (cond ((null? set2)
           (append set1 (list x)))
          ((= x (car set2))
           (append set1 set2))
          ((< x (car set2))
           (append set1 (list x) set2))
          (else (adjoin-iter x
                             (append set1 (list (car set2)))
                             (cdr set2)))))
  (adjoin-iter x '() set))

; tests
(adjoin 1 '(1 2 3 4 5))
(adjoin 0 '(1 2 3 4 5))
(adjoin 6 '(1 2 3 4 5))
(adjoin 3 '(1 2 3 4 5))
(adjoin -12 '(1 2 3 4 5))
(adjoin 34 '(1 2 3 4 5))